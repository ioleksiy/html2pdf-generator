name: Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      puppeteer_version:
        description: 'Puppeteer version to use (e.g., 21.3.6)'
        required: true
        default: 'latest'
  schedule:
    # Run once a week on Sunday at midnight
    - cron: '0 0 * * 0'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ioleksiy/html2pdf-generator

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Puppeteer version and build condition
        id: puppeteer-version
        run: |
          # Set default values
          SHOULD_BUILD="true"
          # Determine Puppeteer version based on trigger event
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PUPPETEER_VERSION="${{ github.event.inputs.puppeteer_version }}"
            echo "Using manual Puppeteer version: $PUPPETEER_VERSION"
          else
            # Extract version from package.json, fallback to 'latest'
            PUPPETEER_VERSION=$(grep -oP '(?<="puppeteer": "\^?)[0-9]+\.[0-9]+\.[0-9]+' package.json 2>/dev/null || echo "latest")
            echo "Detected Puppeteer version from package.json: $PUPPETEER_VERSION"
          fi
          
          # For scheduled builds, check if we need to update
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "Scheduled build - checking if new version is available..."
            # Check existing tags with better error handling
            if command -v jq >/dev/null 2>&1; then
              LATEST_TAG=$(curl -s --fail --max-time 30 "https://registry.hub.docker.com/v2/repositories/ioleksiy/html2pdf-generator/tags" 2>/dev/null | \
                jq -r '.results[]? | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' 2>/dev/null | \
                sort -V | tail -n 1 || echo "")
              
              if [ -n "$LATEST_TAG" ] && [ "$LATEST_TAG" = "$PUPPETEER_VERSION" ]; then
                echo "No new version available. Current: $PUPPETEER_VERSION, Latest: $LATEST_TAG"
                SHOULD_BUILD="false"
              else
                echo "Build needed. Current: $PUPPETEER_VERSION, Latest: $LATEST_TAG"
              fi
            else
              echo "jq not available, proceeding with build"
            fi
          fi
          
          # Set environment variables
          echo "PUPPETEER_VERSION=$PUPPETEER_VERSION" >> $GITHUB_ENV
          echo "SHOULD_BUILD=$SHOULD_BUILD" >> $GITHUB_ENV
          echo "Final decision: PUPPETEER_VERSION=$PUPPETEER_VERSION, SHOULD_BUILD=$SHOULD_BUILD"

      - name: Login to Docker Hub
        if: env.SHOULD_BUILD == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: env.SHOULD_BUILD == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            PUPPETEER_VERSION=${{ env.PUPPETEER_VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PUPPETEER_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build skipped
        if: env.SHOULD_BUILD != 'true'
        run: |
          echo "Build was skipped because no new version is available"
          echo "Current version: ${{ env.PUPPETEER_VERSION }}"
